import React, { useState } from 'react';
import './App.css';
import TaskForm from './components/TaskForm';
import TaskList from './components/TaskList';
import CalendarView from './components/CalendarView';
import WorkloadVisualization from './components/WorkloadVisualization';
import { createTask, updateTask } from './data/taskModel';

function App() {
  const [tasks, setTasks] = useState([]);
  const [currentView, setCurrentView] = useState('list'); // list, calendar, visualization
  const [showTaskForm, setShowTaskForm] = useState(false);
  const [editingTask, setEditingTask] = useState(null);
  const [selectedTask, setSelectedTask] = useState(null);

  const handleAddTask = () => {
    setEditingTask(null);
    setShowTaskForm(true);
  };

  const handleEditTask = (task) => {
    setEditingTask(task);
    setShowTaskForm(true);
  };

  const handleSaveTask = (taskData) => {
    if (editingTask) {
      // –ï—Å–ª–∏ –ø—Ä–∏—à–µ–ª —É–∂–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –∑–∞–¥–∞—á–∏ (—Å id), –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
      const updatedTask = taskData && taskData.id ? taskData : updateTask(editingTask, taskData);
      setTasks(prev => prev.map(task => 
        task.id === editingTask.id ? updatedTask : task
      ));
    } else {
      // –ï—Å–ª–∏ –ø—Ä–∏—à–µ–ª —É–∂–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –∑–∞–¥–∞—á–∏ (—Å id), –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
      const newTask = taskData && taskData.id ? taskData : createTask(taskData);
      setTasks(prev => [...prev, newTask]);
    }
    setShowTaskForm(false);
    setEditingTask(null);
  };

  const handleDeleteTask = (taskId) => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?')) {
      setTasks(prev => prev.filter(task => task.id !== taskId));
    }
  };

  const handleCopyTask = (task) => {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∑–∞–¥–∞—á–∏ —Å –Ω–æ–≤—ã–º ID –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
    const taskCopy = createTask({
      title: task.title,
      description: task.description,
      status: task.status,
      author: task.author,
      startDate: task.startDate ? task.startDate.toISOString() : null,
      endDate: task.endDate ? task.endDate.toISOString() : null,
      importance: task.importance,
      urgency: task.urgency,
      frequency: task.frequency,
      period: task.period,
      completionPercentage: task.completionPercentage,
      comment: task.comment
    });
    setTasks(prev => [...prev, taskCopy]);
  };

  const handleCancelForm = () => {
    setShowTaskForm(false);
    setEditingTask(null);
  };

  const handleTaskClick = (task) => {
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    setEditingTask(task);
    setShowTaskForm(true);
  };

  return (
    <div className="App">
      <header className="app-header">
        <h1>InspiON - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ –∏ –±–∞–ª–∞–Ω—Å–æ–º</h1>
        <p>–¶–∏—Ñ—Ä–æ–≤–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</p>
      </header>

      <nav className="app-navigation">
        <button 
          className={currentView === 'list' ? 'active' : ''}
          onClick={() => setCurrentView('list')}
        >
          üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        </button>
        <button 
          className={currentView === 'calendar' ? 'active' : ''}
          onClick={() => setCurrentView('calendar')}
        >
          üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å
        </button>
        <button 
          className={currentView === 'visualization' ? 'active' : ''}
          onClick={() => setCurrentView('visualization')}
        >
          üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
        </button>
        <button 
          className="add-task-btn"
          onClick={handleAddTask}
        >
          ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
        </button>
      </nav>

      <main className="app-main">
        {showTaskForm && (
          <div className="modal-overlay">
            <div className="modal-content">
              <TaskForm
                task={editingTask}
                onSave={handleSaveTask}
                onCancel={handleCancelForm}
                isEditing={!!editingTask}
              />
            </div>
          </div>
        )}

        {currentView === 'list' && (
          <TaskList
            tasks={tasks}
            onEdit={handleEditTask}
            onDelete={handleDeleteTask}
            onCopy={handleCopyTask}
          />
        )}

        {currentView === 'calendar' && (
          <CalendarView
            tasks={tasks}
            onTaskClick={handleTaskClick}
          />
        )}

        {currentView === 'visualization' && (
          <WorkloadVisualization
            tasks={tasks}
          />
        )}
      </main>

      <footer className="app-footer">
        <p>¬© 2024 InspiON - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –∏ work/life balance</p>
      </footer>
    </div>
  );
}

export default App;


